Day 0 (20/5):
Setting up the dev enviornment (VSCode) and installing all required libraries.
Day 1 (21/5):
I've spent 2 hours creating a basic engine & logic (Vectors, Rectangles, Entities, Renderers, Game loop). I have a white cube, like Blender! I already hate Haxe - no function overloading, weird operator overloading, no normal abstract classes, no protected... Oh well.
Day 2 (22/5):
Began working on PhysicsEntity. It was a nightmare. Collision detection isn't fun. It still has a glaring issue, but I'll fix it next time.
Day 3 (23/5):
Turns out the physics bug was because I used overlapsX instead of overlapsY to determine Y collisions. Oops. I began a rework for nothing. Anyway, these things are mostly irrelevant, as most collisions will be Trigger anyway. And yet, I wasted ~1.5 days on this. Oh well. Should add LDtk support next.
(Also, the first time I build each time, the physics break for no apparent reason (and work properly every time once I rerun it). Why, Haxe?)
Day 4 (24/5):
I added a player-controlled character. Using keyboard input is pretty easy, and it was really nice finally making use of my systems. Like always, however, I began with fixing physics bugs. Oof. Also, apperantly my laptop refuses to run anything at over 30 FPS unless it's being charged. Why, laptop?
Day 5 (25/5):
I added basic enemy & projectile logic. I also fixed some bugs, and removed PhysicsEntity+PhysicsEntity collision, because it was buggy. Things are going along well, but I need to start making graphics now.
Day 6 (26/5):
I've made the first graphic! I even managed to set it up properly in LDtk. It has a very weird graphical bug, however. Next time, I'll try importing the LDtk level into the game, and add tilemap collisions. This should amount to 1/4th of the game.
Day 7 (27/5):
Integrating LDtk was annoying, and I had a ton of foolish bugs. I'm still baffled by the lack of some features in Haxe - like comfortable 2d arrays... Next time, I'll add tilemap collision detection (finally getting rid of my terrible entity-based collision physics). After one week, I have barely anything - I could've finished this in Unity in ~2 hours. Oh well.
Day 8 (29/5):
Still annoying technical stuff. Next time I'll add tilemap collisions. Too tired now. Also, added a music.
Day 9 (31/5):
I've began reworking the physics for tilemap collisions. Not very fun. It mostly works, but has problems in the edges.
I've also added basic animation rendering - I'll add auto changing directions (and actual animations) next time.
Day 10 (1/6):
Added idle animation for Blank, one of the two playable characters, and flipping the sprite when moving. I need so many animations now... And still need to fix the tilemap collisions.