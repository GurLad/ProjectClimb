Day 0 (20/5):
Setting up the dev enviornment (VSCode) and installing all required libraries.
Day 1 (21/5):
I've spent 2 hours creating a basic engine & logic (Vectors, Rectangles, Entities, Renderers, Game loop). I have a white cube, like Blender! I already hate Haxe - no function overloading, weird operator overloading, no normal abstract classes, no protected... Oh well.
Day 2 (22/5):
Began working on PhysicsEntity. It was a nightmare. Collision detection isn't fun. It still has a glaring issue, but I'll fix it next time.
Day 3 (23/5):
Turns out the physics bug was because I used overlapsX instead of overlapsY to determine Y collisions. Oops. I began a rework for nothing. Anyway, these things are mostly irrelevant, as most collisions will be Trigger anyway. And yet, I wasted ~1.5 days on this. Oh well. Should add LDtk support next.
(Also, the first time I build each time, the physics break for no apparent reason (and work properly every time once I rerun it). Why, Haxe?)
Day 4 (24/5):
I added a player-controlled character. Using keyboard input is pretty easy, and it was really nice finally making use of my systems. Like always, however, I began with fixing physics bugs. Oof. Also, apperantly my laptop refuses to run anything at over 30 FPS unless it's being charged. Why, laptop?
Day 5 (25/5):
I added basic enemy & projectile logic. I also fixed some bugs, and removed PhysicsEntity+PhysicsEntity collision, because it was buggy. Things are going along well, but I need to start making graphics now.
Day 6 (26/5):
I've made the first graphic! I even managed to set it up properly in LDtk. It has a very weird graphical bug, however. Next time, I'll try importing the LDtk level into the game, and add tilemap collisions. This should amount to 1/4th of the game.
Day 7 (27/5):
Integrating LDtk was annoying, and I had a ton of foolish bugs. I'm still baffled by the lack of some features in Haxe - like comfortable 2d arrays... Next time, I'll add tilemap collision detection (finally getting rid of my terrible entity-based collision physics). After one week, I have barely anything - I could've finished this in Unity in ~2 hours. Oh well.
Day 8 (29/5):
Still annoying technical stuff. Next time I'll add tilemap collisions. Too tired now. Also, added a music.
Day 9 (31/5):
I've began reworking the physics for tilemap collisions. Not very fun. It mostly works, but has problems in the edges.
I've also added basic animation rendering - I'll add auto changing directions (and actual animations) next time.
Day 10 (1/6):
Added idle animation for Blank, one of the two playable characters, and flipping the sprite when moving. I need so many animations now... And still need to fix the tilemap collisions.
Day 11 (2/6):
Vastly improved tilemap collisions, although they still don't work at extreme EDGE cases (get the POINT?).
Day 12 (3/6):
Finally fixed the tilemap collisions! I've also added onTilemapCollision - mostly for destroying projectiles. I really need to start working on animations.
Day 13 (4/6):
Added CameraFollower. It gives me slight motion sickness - too many lerps perhaps? I'll need to add more animations to make sure.
Day 14 (5/6):
I've added some basic goomba-like enemies. I'm progressing at a snail's pace, so I made them snails. The animation is temporary. I still need to add full player animations, actual attacks & super jump, fix some physics bugs, add another player, more enemis, and so on. Only 15 days left...
Day 15 (6/6):
Wow, I finally got to make use of my flexible code base. I easily added multiplayer & LDtk entity loading support, in addition to creating a new enemy animation. I actually have a chance to make something decent in the end. I hope.
Day 16 (7/6):
After way too much time, I've finally made a bad walking animation. Hate walking animations. Other than that, I've also added the Super Jump & Cast input logic.
Day 17 (8/6):
I've added spell casting (aka attack+jump) logic. It should make it pretty easy to add more spells in the future, as long as they aren't continous.
Day 18 (10/6):
It might be pointless, as I probably won't have time to add more levels, but I made the level loading generic. I've also changed the Jump and Air Attack actions to use spells. It's almost Smash-like now!
Day 19 (11/6):
Snails can finally fight back! You can lose (aka the player is just destroyed)!
Day 20 (12/6):
Both ground and air spells now work completely (aka have graphics)! It feels like a true game at last. All I have to add is the jump (and probably more interesting enemies) and my initial vision is complete! I'm not sure whether to spend time adding more spells or more content. Hmm.
Day 21 (13/6):
I didn't have much time today, and only added a single animation & fixed a bug. So little time...
Day 22 (14/6):
I've finally added the Blink (teleport) spell!!! The whole basic gameplay is now done! And I actually have 6 days for content! Incredible.
Day 23 (15/6):
I've used up a day for lifebars. It feels like a waste. I mean, the game would be borderline unplayable without them, but what about content? More enemies? Menu? Maybe tomorrow.
Day 24 (16/6):
Technically, I've made the water graphics & new music yesterday. Anyway, today I've added the water spells. Now I just need to add a spell select screen.
Day 25 (17/6):
Project Climb is finally a complete, playable product! Besides having no content nor a win condition, it now has complete UI, a menu and a quit button. Three days for content, eh? And I want to add a boss too...